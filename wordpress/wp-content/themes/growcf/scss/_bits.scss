// Colors
$navy: #253d51;
$yellow: #fef4a6;
$blue: #68ace4;
$silver: #dfe2e5;
$gray: gray;

// Font Weights
$light: 300;
$normal: 400;
$bold: 700;
$semibold: 600;

// Breakpoints
$medium: 500px;
$medium-wide: 750px;
$wide: 920px;
$extrawide: 1500px;

// Other
$max-width: 1800px;

// Rem mix-in for IE8
@mixin rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $base-font-size: 16px; // should be consistent with your html/body font-size
  $px-values: ();
  $rem-values: ();
 
  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from base-font-size
      $new-rem-value: $value / $base-font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else if $value == auto or $value == inherit {
		  // auto or inherit - don't add px or rem
		  $px-values: join($px-values, $value);
		  $rem-values: join($rem-values, $value);
		}
     @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $base-font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }
 
  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}